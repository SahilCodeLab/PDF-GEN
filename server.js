// ====== BACKEND: server.js (Ultra-Advanced Version) ====== require('dotenv').config(); const express = require('express'); const cors = require('cors'); const axios = require('axios'); const PDFDocument = require('pdfkit'); const fs = require('fs'); const { Readable } = require('stream');

const app = express(); app.use(cors()); app.use(express.json());

const models = [ { name: "qwen/qwen3-coder:free", key: process.env.OPENROUTER_API_KEY_1 }, { name: "google/gemini-2.0-flash-exp:free", key: process.env.OPENROUTER_API_KEY_2 } ];

function cleanText(text) { return text .replace(/[^�    .replace(/[^\x00-\x7F]/g, "") .replace(/[\uFFFD]/g, "") .replace(/\s{2,}/g, " ") .trim(); }

function sanitizeFilename(str) { return str.replace(/[^a-z0-9]/gi, '_').toLowerCase().slice(0, 40); }

function buildPrompt(question, marks) { const formatGuide = ` Structure:

1. Introduction (context)


2. Main Points (bold headings, bullets)


3. Examples (if needed)


4. Conclusion (summarize)



Keep tone academic, clean and WBSU NEP exam-friendly.`;

const lengthMap = { 2: "Answer in 3-5 lines (~50-70 words).", 5: "Answer in 8-12 lines (~100-150 words).", 10: "Answer in 20-25 lines (~250-300 words).", 15: "Answer in 30-40 lines (~350-400 words)." };

return 📘 WBSU Semester 2 Question:\n${question}\n\nMarks: ${marks}\n\nGuideline: ${lengthMap[marks] || ''}\n${formatGuide}; }

async function generateAnswer(question, marks) { const prompt = buildPrompt(question, marks);

for (const model of models) { try { const response = await axios.post( 'https://openrouter.ai/api/v1/chat/completions', { model: model.name, messages: [{ role: 'user', content: prompt }], temperature: 0.6 }, { headers: { 'Authorization': Bearer ${model.key}, 'Content-Type': 'application/json' } } ); const answer = response.data.choices[0].message.content; if (answer) return { answer: cleanText(answer), model: model.name }; } catch (err) { console.warn(⚠️ ${model.name} failed.); } } return { answer: "❌ Answer generation failed.", model: "None" }; }

function createWatermark(doc) { const { width, height } = doc.page; doc.fontSize(18).fillColor('gray').opacity(0.1).text( 'Generated by SahilCodeLab', width / 2 - 120, height / 2 - 10, { align: 'center', lineBreak: false } ).opacity(1); }

app.post('/generate-preview', async (req, res) => { const { questions, marks } = req.body; if (!questions || !marks) return res.status(400).send('Missing input');

let previews = []; for (let q of questions) { const { answer, model } = await generateAnswer(q, marks); previews.push({ question: q, answer, model }); }

res.json(previews); });

app.post('/download-pdf', async (req, res) => { const { questions, subject, marks } = req.body; if (!questions || !marks) return res.status(400).send('Missing data');

const filename = sanitizeFilename(${subject || 'WBSU_NEP'}_${questions[0].slice(0, 20)}); res.setHeader('Content-Disposition', attachment; filename=${filename}.pdf); res.setHeader('Content-Type', 'application/pdf');

const doc = new PDFDocument({ margin: 50, size: 'A4' }); doc.pipe(res);

doc.fontSize(20).text(${subject || 'WBSU Semester 2'} - Answer Sheet, { align: 'center', underline: true }); doc.moveDown(1);

for (let i = 0; i < questions.length; i++) { const q = questions[i]; const { answer, model } = await generateAnswer(q, marks);

createWatermark(doc);

doc.fontSize(14).fillColor('black').text(`Q${i + 1}: ${q}`, {
  underline: true
});
doc.moveDown(0.4);

doc.fontSize(12).fillColor('black').text('Answer:', { bold: true });
doc.moveDown(0.2);

doc.fontSize(12).fillColor('black').text(answer, {
  lineGap: 4,
  align: 'justify'
});

doc.moveDown(1);
doc.fontSize(10).fillColor('gray').text(`Model used: ${model}`, {
  align: 'right'
});

if (i !== questions.length - 1) doc.addPage();

}

doc.end(); });

app.get('/', (req, res) => { res.send('📘 WBSU Answer Generator API v2 running...'); });

const PORT = process.env.PORT || 3000; app.listen(PORT, () => { console.log(🚀 Running at http://localhost:${PORT}); });

