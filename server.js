require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const PDFDocument = require('pdfkit');
const stream = require('stream');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

app.post('/', async (req, res) => {
  const { questions, subject, marks, geminiKey, pplxKey } = req.body;

  const MARKS_LENGTH = {
    2: { lines: 4, words: 60 },
    5: { lines: 10, words: 120 },
    10: { lines: 22, words: 280 },
    15: { lines: 35, words: 330 },
  };

  const answerLength = MARKS_LENGTH[marks] || MARKS_LENGTH[5];

  const results = [];

  for (const question of questions) {
    const prompt = `Write an academic answer for this question in about ${answerLength.words} words:\n\nQ: ${question}\n\nAnswer:`;

    let answer = '';
    let modelUsed = 'None';

    // 🧠 Gemini First
    try {
      const geminiResp = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${geminiKey || process.env.GEMINI_API_KEY}`,
        {
          contents: [{ parts: [{ text: prompt }] }]
        }
      );

      answer = geminiResp?.data?.candidates?.[0]?.content?.parts?.[0]?.text || '';
      modelUsed = 'Google Gemini 2.0 Flash';
    } catch (err) {
      // fallback
    }

    // 🧠 Perplexity fallback
    if (!answer && (pplxKey || process.env.PERPLEXITY_API_KEY)) {
      try {
        const perplexityResp = await axios.post(
          'https://api.perplexity.ai/chat/completions',
          {
            model: "mistral-7b-instruct",
            messages: [{ role: "user", content: prompt }]
          },
          {
            headers: {
              Authorization: `Bearer ${pplxKey || process.env.PERPLEXITY_API_KEY}`,
              "Content-Type": "application/json"
            }
          }
        );

        answer = perplexityResp?.data?.choices?.[0]?.message?.content || '';
        modelUsed = 'Perplexity AI';
      } catch (err) {
        answer = "❌ Answer generation failed.";
        modelUsed = "none";
      }
    }

    results.push({
      question,
      answer,
      model: modelUsed
    });
  }

  res.json(results);
});

app.post('/pdf', async (req, res) => {
  const { answers, subject } = req.body;

  const doc = new PDFDocument();
  const bufferStream = new stream.PassThrough();
  res.setHeader('Content-disposition', `attachment; filename=${subject || 'GeneratedAnswers'}.pdf`);
  res.setHeader('Content-type', 'application/pdf');
  doc.pipe(bufferStream);

  doc.fontSize(20).text(`Subject: ${subject || "Untitled"}`, { align: 'center' });
  doc.moveDown();

  answers.forEach((item, i) => {
    doc.fontSize(14).fillColor('black').text(`Q${i + 1}: ${item.question}`, { bold: true });
    doc.moveDown(0.5);
    doc.fontSize(12).fillColor('gray').text(item.answer);
    doc.moveDown(1.5);

    // Watermark
    doc.fillColor('lightgray').fontSize(40).opacity(0.2)
      .text('Generated by SahilCodeLab', {
        align: 'center',
        rotate: 0
      });
    doc.opacity(1);
    doc.addPage();
  });

  doc.end();
  bufferStream.on("data", (chunk) => res.write(chunk));
  bufferStream.on("end", () => res.end());
});

app.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
});