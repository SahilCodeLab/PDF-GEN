require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { PDFDocument, rgb, StandardFonts } = require('pdf-lib');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

const DEFAULT_GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const DEFAULT_PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;

const fetchFromGemini = async (question, marks, key) => {
  try {
    const res = await axios.post(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',
      {
        contents: [{ parts: [{ text: `Give a detailed ${marks} marks answer for:\n${question}` }] }],
      },
      {
        params: { key: key },
        headers: { 'Content-Type': 'application/json' },
      }
    );
    return res.data.candidates?.[0]?.content?.parts?.[0]?.text || null;
  } catch {
    return null;
  }
};

const fetchFromPerplexity = async (question, marks, key) => {
  try {
    const res = await axios.post(
      'https://api.perplexity.ai/chat/completions',
      {
        model: 'pplx-70b-online',
        messages: [{ role: 'user', content: `Give a detailed ${marks} marks answer for:\n${question}` }],
      },
      {
        headers: {
          Authorization: `Bearer ${key}`,
          'Content-Type': 'application/json',
        },
      }
    );
    return res.data.choices?.[0]?.message?.content || null;
  } catch {
    return null;
  }
};

const generateAnswer = async (question, marks, keys) => {
  // Gemini try
  if (keys.gemini) {
    const answer = await fetchFromGemini(question, marks, keys.gemini);
    if (answer) return { answer, model: 'Gemini' };
  }

  // Perplexity fallback
  if (keys.perplexity) {
    const answer = await fetchFromPerplexity(question, marks, keys.perplexity);
    if (answer) return { answer, model: 'Perplexity' };
  }

  return { answer: '❌ Answer generation failed.', model: 'none' };
};

app.post('/', async (req, res) => {
  const { questions, marks, subject, geminiKey, perplexityKey } = req.body;

  if (!questions || !Array.isArray(questions)) {
    return res.status(400).json({ error: 'Invalid questions input' });
  }

  const answers = [];

  for (const question of questions) {
    const result = await generateAnswer(question, marks, {
      gemini: geminiKey || DEFAULT_GEMINI_API_KEY,
      perplexity: perplexityKey || DEFAULT_PERPLEXITY_API_KEY,
    });

    answers.push({ question, answer: result.answer, model: result.model });
  }

  // If no subject — just return preview
  if (!subject) return res.json(answers);

  // Create PDF
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage();
  const { width, height } = page.getSize();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  let y = height - 50;
  answers.forEach((item, index) => {
    const qText = `Q${index + 1}: ${item.question}`;
    const aText = `Ans: ${item.answer}`;
    const modelText = `Model: ${item.model}`;
    const lines = [qText, aText, modelText, ''];
    lines.forEach(line => {
      if (y < 60) {
        page = pdfDoc.addPage();
        y = height - 50;
      }
      page.drawText(line, { x: 50, y, size: 10, font });
      y -= 20;
    });
  });

  // Watermark
  const watermark = 'Generated by SahilCodeLab';
  page.drawText(watermark, {
    x: width / 2 - font.widthOfTextAtSize(watermark, 10) / 2,
    y: 30,
    size: 10,
    font,
    color: rgb(0.5, 0.5, 0.5),
  });

  const pdfBytes = await pdfDoc.save();
  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', `attachment; filename="${subject}.pdf"`);
  res.send(pdfBytes);
});

app.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
});